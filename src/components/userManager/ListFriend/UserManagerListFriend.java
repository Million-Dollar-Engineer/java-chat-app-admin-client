/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components.userManager.ListFriend;

import Interface.User;
import com.google.gson.Gson;
import components.userManager.LoginHistory.*;
import components.GroupChatList.ViewAllMember.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author lnt09
 */
public class UserManagerListFriend extends javax.swing.JPanel {

    /**
     * Creates new form GroupChatListAllMember
     */
    private String username;

    private String id = null;

    public UserManagerListFriend(String id, String name) {
        this.id = id;
        initComponents();

        // Add fake data
        try {
            for (int i = 0; i < 50; i++) {
                userManagerListFriendTable.addRow(new Object[]{"lenguyenthai123", "Lê Nguyên Thái", "202 Nguyễn Trọng Kỷ", "2003/06/16", "Male", "lnt0995449235@gmail.com", "2023/02/12", "Online", true});
            }
            usernameText.setText(name);
        } catch (Exception err) {
            System.out.println("Loi trong khoi tao");
            err.printStackTrace();
        }
//        username = name;

        new CallAPIListFriend().execute();
    }

    private class CallAPIListFriend extends SwingWorker<String, User[]> {

        @Override
        protected String doInBackground() {
            try {
                String api = "http://13.215.176.178:8881/admin/friend-list/" + id;

                URL url = new URL(api);
                HttpURLConnection con = (HttpURLConnection) url.openConnection();

                con.setRequestMethod("GET");
                con.setRequestProperty("Content-Type", "application/json");
                con.setDoOutput(true);

                int resCode = con.getResponseCode();
                System.out.println("Testing code: " + HttpURLConnection.HTTP_ACCEPTED);
                if (resCode == HttpURLConnection.HTTP_OK) {
                    System.out.println("Vao day");
                    String resBuf = "";
                    String line = "";
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
                        while ((line = reader.readLine()) != null) {
                            resBuf += line;
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(UserManagerListFriend.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println("Data raw: " + resBuf);

                    JSONParser par = new JSONParser();
                    JSONObject res = (JSONObject) par.parse(resBuf);
                    JSONArray list = (JSONArray) res.get("friendList");

                    String dataJson = list.toString();

                    Gson gson = new Gson();
                    User[] users = gson.fromJson(dataJson, User[].class);

                    publish(users);

                    con.disconnect();

                    return "Done";
                }
                con.disconnect();
                return "Failed";
            } catch (ParseException e) {

            } catch (IOException ex) {
                Logger.getLogger(UserManagerListFriend.class.getName()).log(Level.SEVERE, null, ex);
            }
            return "failed";
        }

        @Override
        protected void process(List<User[]> chunks) {
            User[] data = chunks.get(chunks.size() - 1);
            for (User user : data) {
                userManagerListFriendTable.addUserRow(user);
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previousPageUserManager = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userManagerListFriendTable = new components.userManager.ListFriend.UserManagerListFriendTable();

        setBackground(new java.awt.Color(255, 255, 255));

        previousPageUserManager.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        previousPageUserManager.setForeground(new java.awt.Color(127, 127, 127));
        previousPageUserManager.setText("User Manager");
        previousPageUserManager.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(127, 127, 127));
        jLabel1.setText("/ List friend of");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(127, 127, 127));

        usernameText.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        usernameText.setForeground(new java.awt.Color(51, 51, 51));

        jScrollPane1.setBorder(null);

        userManagerListFriendTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "User Name", "Full Name", "Address", "Date of Birth", "Sex", "Email", "Last Loign", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userManagerListFriendTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previousPageUserManager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameText, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(previousPageUserManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    protected void paintComponent(Graphics grphcs) {
        Graphics2D g2 = (Graphics2D) grphcs;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(getBackground());
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
        super.paintComponent(grphcs);
    }

    public void addListenerPreviousPageUserManager(MouseAdapter e) {
        previousPageUserManager.addMouseListener(e);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel previousPageUserManager;
    private components.userManager.ListFriend.UserManagerListFriendTable userManagerListFriendTable;
    private javax.swing.JLabel usernameText;
    // End of variables declaration//GEN-END:variables
}
