/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components.userManager;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author lnt09
 */
public class UserManager extends javax.swing.JPanel {

    /**
     * Creates new form UserManager
     */
    public UserManager() {
        initComponents();
        setOpaque(false);

        //Fake data
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", false});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", false});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", true});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", false});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", true});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", false});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", false});
        userManagerTable.addRow(new Object[]{"rantczak0", "Roseanna Antczak", "Apt 1559", "Apt 1559", "5/24/2023", "Female", "rantczak0@friendfeed.com", "6/23/2023", "Male", false});

        
//        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
//        leftRenderer.setHorizontalAlignment(SwingConstants.LEFT);
//        userManagerTable.getColumnModel().getColumn(9).setCellRenderer(leftRenderer);

        // For Table    
        userManagerTable.addListener(new ListenerTable());

        // Searching 
        searching.addListenerSearchButton(new ListenerSearching());

        //Refreshing
        searching.addListenerRefreshButton(new ListenerRefresh());

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

// Handler button ========================    
    // Handler search => call API for search
    public class ListenerSearching implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            System.out.println(searching.getSearchText() + "     " + searching.getOptionSearch() + "        " + searching.getSortBy());
            new APICallWorkerSearching().execute();
        }
    }

    public class APICallWorkerSearching extends SwingWorker<String, Object> {

        @Override
        protected String doInBackground() throws Exception {

            //Call API in here
            return "Done";
        }

        @Override
        protected void process(List<Object> chunks) {
            Object latestRow = chunks.get(chunks.size() - 1);
            // Doing update
        }

        @Override
        protected void done() {
            try {
                String result = get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Handler refresh => Call api
    public class ListenerRefresh implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            new APICallWorkerRefresh().execute();
        }
    }
    // Create new thread for solve the call api by Swing Worker

    public class APICallWorkerRefresh extends SwingWorker<String, Object> {

        @Override
        protected String doInBackground() throws Exception {

            return "Done";

        }

        @Override
        protected void process(List<Object> chunks) {
            Object latestValued = chunks.get(chunks.size() - 1);

        }

        @Override
        protected void done() {
            try {
                String result = get();
                System.out.println(result);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    protected void paintComponent(Graphics grphcs) {
        System.out.println("User manager");
        Graphics2D g2 = (Graphics2D) grphcs;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(getBackground());
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
        super.paintComponent(grphcs);
    }

    private String getStringValue(Object value) {
        if (value instanceof String) {
            return (String) value;
        } else {
            return "";  // Hoặc xử lý giá trị không phải chuỗi theo cách khác nếu cần thiết
        }
    }

    private Boolean getBooleanValue(Object value) {
        if (value instanceof Boolean) {
            return (Boolean) value;
        } else {
            return false;  // Hoặc xử lý giá trị không phải chuỗi theo cách khác nếu cần thiết
        }
    }

    private int getIntValue(Object value) {
        if (value instanceof Integer) {
            return (Integer) value;
        } else {
            return 0;  // Hoặc xử lý giá trị không phải số nguyên theo cách khác nếu cần thiết
        }
    }

    public String getUsername()
    {
        return userCRUD.getUsernameText();
    }
    
    public void addListenerListFriend(ActionListener listener)
    {
        userCRUD.addListenerListFriendButton(listener);
    }
    
        public void addListenerLoginHistory(ActionListener listener)
    {
        userCRUD.addListenerLoginHistoryButton(listener);
    }
    
    public class ListenerTable implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = userManagerTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ dòng được chọn
                    String username = getStringValue(userManagerTable.getValueAt(selectedRow, 0));
                    String password = getStringValue(userManagerTable.getValueAt(selectedRow, 1));
                    String fullname = getStringValue(userManagerTable.getValueAt(selectedRow, 2));
                    String address = getStringValue(userManagerTable.getValueAt(selectedRow, 3));
                    String dateOfBirth = getStringValue(userManagerTable.getValueAt(selectedRow, 4));
                    String sex = getStringValue(userManagerTable.getValueAt(selectedRow, 5));
                    String email = getStringValue(userManagerTable.getValueAt(selectedRow, 6));
                    String status = getStringValue(userManagerTable.getValueAt(selectedRow, 8));
                    Boolean ban = getBooleanValue(userManagerTable.getValueAt(selectedRow, 9));
                    System.out.println(ban);
                    // In thông tin của dòng được chọn
                    userCRUD.setInfo(username, fullname, password, dateOfBirth, sex, email, address, status, ban);
                }
            }
        }
    }

    

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searching = new components.userManager.searching();
        jScrollPane2 = new javax.swing.JScrollPane();
        userManagerTable = new components.userManager.UserManagerTable();
        userCRUD = new components.userManager.UserCRUD();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(127, 127, 127));
        jLabel1.setText("User Manager");

        jScrollPane2.setBorder(null);

        userManagerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Password", "Full Name", "Address", "Date of Birth", "Sex", "Email", "Last Login", "Status", "Ban"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userManagerTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(userManagerTable);
        if (userManagerTable.getColumnModel().getColumnCount() > 0) {
            userManagerTable.getColumnModel().getColumn(9).setResizable(false);
            userManagerTable.getColumnModel().getColumn(9).setPreferredWidth(20);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searching, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userCRUD, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 949, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(searching, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userCRUD, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private components.userManager.searching searching;
    private components.userManager.UserCRUD userCRUD;
    private components.userManager.UserManagerTable userManagerTable;
    // End of variables declaration//GEN-END:variables
}
